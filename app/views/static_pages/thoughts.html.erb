<div id='intro'>
  <p>
    Hi. I'm Shane.
  </p>
</div>
<p></p>
<p></p>
<p></p>
<div>
  <table id="tableoftext">
    <thead>
      <th>One Back, Two Forward 2017.03.06</th>
    </thead>
    <tbody>
    <tr>
      <td>
        <p>
          I'm a little embarrassed it's been a full year since I have done any blogging. On the flip side, pretty sure
          no one sees this but me. At any rate, here's the story...
        </p>
        <p>
          Anyone that knows me also knows I absolutely love strategy games. A lot of this can be
          explained by <a href="http://www.16personalities.com/intj-personality">my personality type</a>, but I also
          grew up playing a lot of games with my family. At any rate, I consider myself a decent strategic thinker.
          Whether I'm any good at it or not, it's probably fair to say strategy is the lens through which I see the
          world. Everything is goal-oriented for me, so actions and decisions are ultimately just small pieces pushing
          towards some end. When I decided to adjust my endgoal in April of 2015 (see my previous post, The Pursuit of
          Happiness) and start working towards becoming a software developer, the first step was to reduce my working
          hours so I had my evenings free to practice coding.
        </p>
        <p>
          This is the first key to stratigic thinking: Constantly ask, "Given my current position and my end goal, what
          is the first step I should take right now?" Implicit in this question is the understanding that your position
          is always changing, but your end goal is not. Thus we aim to see as far into the future as possible, but only
          worry about information relevant to determining the best first step from our current position.
        </p>
        <p>
          My decision process went something like this, "Ultimately I want to be an independent software developer that
          creates his own applications that make him money, passively. To do that, I need to become an expert coder. To
          become an expert coder I need to write a lot of code over many years. I have to survive, so I need to get
          someone to pay for my living expenses while I learn - sounds like employment. Ok, so to get a job as a
          programmer, I need to learn enough to compete for an entry-level position. In order to learn enough to get a
          job, I need more time outside of work. Ok, leave public accounting (side benefit - I hate it anyway) and get
          a job that demands less hours."
        </p>
        <p>
          Now that was a bit of a rant, but I think it's a great demonstration of the process of answering the question
          outlined above. To get from ultimate goal back to current step, one has to work backwards until the current
          step is small enough that it can be executed immediately. At some point, the true first step (in this case,
          perhaps searching linkedIn for "part-time accounting jobs") becomes trivially obvious, and it's better to
          focus on a slightly higher-order goal so that you can just sort of execute on autopilot until that goal is
          acheived. In this case, the first step I would focus on would probably be getting a new job with less hours,
          and that's exactly what I did.
        </p>
        <p>
          Skipping over the details of how it all happened, I got a job offer to work for Chatham, and found myself at
          a point where I could either accept the offer and move on to figuring out my next step, or reject the offer
          and keep looking for a better job. So the question is simple - does this job give me enough money to survive
          and enough time to practice coding? Yes. However, the other relevant question is whether or not there are
          better alternatives out there that are attainable with low enough incremental cost that they are worth
          pursuing, even though that means giving up the current option. Obviously I thought there were not, but the
          reasoning behind that conclusion is instructive.
        </p>
        <p>
          While Chatham met my primary objectives, any job I even applied for would meet those. So we can kind of ignore
          the primary objectives (enough money and time) and focus on other things when comparing alternatives. This is
          where it gets increasingly grey. But the main reason I decided Chatham was my best strategic play was that I
          knew they developed their own software in-house. This was such a potential upside, that it made the decision
          glaringly obvious. I could get a job as a bartender, accountant, laborer, or any number of general business
          administration positions that would probably pay enough (although some certainly more than others) and offer
          few enough hours. But none of these options were likely to have the position that aligned with my higher-order
          goal of getting a job as a developer in-house. We all know that getting in the door is the hardest part. If I
          could come in as an accountant, but then move into software without leaving the company, that would be way
          easier than attempting to compete on the open market for developers without any experience.
        </p>
        <p>
          Ultimately that's exactly what happened. I had to move from Denver to Philadelphia to take the job, but I now
          write code full-time. Now, I have to explain some nuance that is confusing to those not in the software world.
          For every small chunk of code written, there should be some kind of test to make sure it does what it's
          supposed to do. That test could be a person using the software, or it could be an automated test that uses the
          software in the same way a person (or other software) might. That is an over-simplification, but it will do.
          The nuance has to do with my title. I call myself a "Software Test Engineer," which is distinct from a
          "Software Tester." A Software Tester (in my mind, but not always in others' or job descriptions) is a human
          that has made a career of using software for the purpose of finding its flaws so that the Production Software
          Engineers can make the software better. In contrast, a Software Test Engineer is a software engineer that
          writes the code that tests the production code. Often the two roles will have overlap to some degree, and the
          titles certainly do not always align with what the roles actually entail, but it's an important distinction to
          me, because I would absolutely hate my job if I spent most of my time manually testing. I love my job because
          I spend most of my time writing code. The fact that the code I write tests the code that serves our end users,
          rather than serving them directly, doesn't really matter that much (however I would like to write production
          code at some point).
        </p>
        <p>
          So I set out to be a full-stack Ruby on Rails developer. Almost two years later
          I think it's still a little questionable as to whether I'm a full stack developer. This site is a rails app,
          but the app is just serving up rendered html from templates. Slightly better than static HTML files, but not
          much better. There's a database setup, and I've laid all the groundwork to build pretty much anything here,
          but I don't really have any reason to store anything in the database. That said, I understand how it all works
          now, and have built some other working web apps, mostly for learning purposes. As I've learned more, I've
          continued to fall in love with Ruby, but I'm not sure I really like Rails. It's amazingly fast to get an app
          put together, and I can see the huge value for prototyping or for a small startup that just needs to get off
          the ground, fully expecting to do a ground-up re-write later, but I don't think it is quite what I would want
          for the longer term if I'm building a web app. It seems like an API-first approach would be more robust and
          maintainable, while also providing huge benefits to users that want to use your core functionality without
          having to go through your front end. Incidentally, I think my next challenge will be
          to create an API (probably in Ruby) and then build a completely separate front end that uses it
          (probably in Angular 2 or 4). I think this is my favorite stack overall, given my extremely limited experience
          with it.
        </p>
        <p>
          In sum, I think strategically, and you should too, at least some of the time. I've made some pretty huge
          strides towards my pursuit of happiness. Don't forget to ask yourself where you're going with your life. I'm
          a much better programmer now, and this is a web app as a result. Reach out if you have something interesting
          to work on and need some help. No longer working for free, but always considering equity.
        </p>
        <p>
          cheers
        </p>
      </td>
    </tr>
    </tbody>
  </table>
</div>
<p></p>
<div>
  <table id="tableoftext">
    <thead>
      <th>Failing Forward 2016.02.02</th>
    </thead>
    <tbody>
    <tr>
      <td>
        <p>
          Well, I'm about two months away from failing to become a developer within a year of leaving EY.  I'm richer,
          older, and wiser, and I know a lot more code than I did ten months ago, but I'm no full stack developer.  I
          look back over the last ten months and think, where the hell did it go? At the same time, ten months doesn't
          seem so long as it did a few years ago.  The days crawl and the years fly.
        </p>
        <p>
          So I'm forced to ask what I've done with my life the last ten months. Well I've learned a lot about
          derivatives and hedge accounting.  The finance is interesting. I would even say beautiful. The accounting is
          complicated. I would even say ugly. I've also become pretty handy in javascript.  I'd say it's now the
          language I know best, save Excel, if that counts. I finally figured out how to lace together some HTML and JS
          to get out of the console and actually do something with my JS.  That was a big breakthrough. I'm shocked at
          how disjointed most of the front end materials are out there - they teach you HTML and CSS in tandem, as they
          should.  They teach you JS. Why don't they lace it all together? HTML and CSS are pretty lame without JS to do
          some computation. JS is pretty boring without a site to run on. I digress.
        </p>
        <p>
          I snowboarded a lot. I found some new beers. I worked some pretty long hours more often than I expected. I
          made more money than I expected. I wrote a macro in VBA that is actually being used by my coworkers every
          day. I learned why programmers hate VBA. I went from hating it, to tolerating it, to deciding it's really
          great for what it does, if not exactly elegant or minimalistic.
        </p>
        <p>
          <em><strong>I got engaged.</strong></em>
        </p>
        <p>
          The truth is, I really enjoyed myself the last ten months.  I found out that the culture you work in is
          perhaps the single most important part of your work.  I found out that I can really enjoy my work as long as
          I'm building things.  Creating intricate accounting templates to automate the accounting we do can be fun.
          Pitching those templates to my team and getting appreciation is pretty damn fulfilling. I've been surprised
          at the few late adopters, however.  I can't understand choosing to do work when a computer will do it for
          you, and the only cost is a little time up front to learn how to tell the computer to do your bidding. I'm
          not talking about writing the code. People won't even put in the work to install my code or learn how to use
          it. It's mind blowing.
        </p>
        <p>
          I learned going to a programming bootcamp is really expensive and I can't afford it. The problem is I can't
          afford not to get into coding. This is my life we're talking about. I can't waste it away doing something I
          wasn't built for and will never master.
        </p>
        <p>
          Overall, I think if I abstract enough, the last ten months were a success. While I didn't meet my goal of
          becoming a full stack web developer, I met my goal of finding happiness, and let's face it - the programming
          is only a means to that end.	So let's try again.  Before April 2017 I will be a full stack developer. In
          the meantime, I'm young, in love, and pretty rich compared to the other 7 billion people out there, so I
          can't complain (too much).
        </p>
      </td>
    </tbody>
    </tr>
  </table>
</div>
<p></p>
<div>
  <table id="tableoftext">
    <thead>
    <th>The Pursuit of Happiness, 2015.04.03</th>
    </thead>
    <tbody>
    <tr>
      <td>
        <p>
          This Friday will be my last day with <a href="http://www.ey.com">EY,</a> the accounting firm I've worked at
          for the last year and a half since I graduated from <a href="http://www.oru.com">ORU</a> with a bachelor's
          in accounting. I worked in "assurance" which is just a fancy name for audit.  Basically we're hired to check
          out a company's financial statements and make sure they're in accordance with the applicable reporting
          standards. It will come as no surprise to anyone that knows me that this was easily the worst job I've ever
          had, in terms of the work itself. Don't get me wrong. I can say nothing bad about the company, the people I
          worked with, what I got paid, the hours, or any of the normal Big 4 complaints. I just hated the work.
        </p>
        <p>
          It's interesting, because I'm no doubt a very detail-oriented individual. That said, I'm not what I'll call
          "process-oriented." I'm more "concept-oriented." The best way I can articulate this distinction is I'm more
          interested in answering the question of "why?" than I am "how?" Accounting is well-suited for
          process-oriented thinkers, because all accounting aims to do is take something that already happened, and
          walk it through a process to arrive at HOW to account for it in monetary terms. There are endless rules that
          are like a series of if-then statements you have to work through to arrive at the correct action. A mind
          that can latch on to these processes and recall them at will when needed is invaluable in the profession.
          In contrast, thinking about WHY the transactions happened in the first place is not very helpful.
        </p>
        <p>
          So it's been rough. I know I'm smart. I know I work hard. Yet, I always feel so incompentent compared to so
          many of my associates at EY. I'm tempted to ask, "What's wrong with you? Figure it out Shane. You can do
          anything you put your mind to." The truth is, I probably could. I would never be a great auditor, but I
          could be good enough to make a lot of money over the next 10 years. So what's the problem? I would never be
          happy.
        </p>
        <p>
          I guess that's the reason for this post. I want to talk about happiness, and how I plan to achieve it.
          Growing up, we never really had quite enough money. I don't mean we were poor in terms of our household
          income. I mean specifically we never had enough for all the things we wanted. My parents were rich early in
          life, lost their fortune, and never really adjusted to a modest lifestyle. This engrained in me a deep
          desire to be rich so I didn't have to deal with all of the stress that came from spending all you make,
          regardless of how much or little you have. I would even say I thought the old "money can't buy happiness"
          proverb was blatantly false. Sure, unlimited money without having to work would probably buy most people
          happiness, but who is that an option for? Generally, money comes at a price. Generally, that price is work.
          If you spend all day doing something you hate, how much money do you need to offset that cost? Probably more
          than the job pays.
        </p>
        <p>
          This brings me to another proverb, "Love your work, and you never have to." I think that's the essense of
          what I've learned. Everyone should spend as much time as they need to find something they really love. It's
          not easy. Regardless of what that thing is, one should pursue it with everything they have. EVERYTHING. Some
          things are harder to monetize than others, and that makes it harder for those of us who pick fields that
          only pay well at the top. That said, who cares? If you love the work, who cares how much you get paid. It's
          like a perpetual vacation. You do what you love every day until you're good enough to get a lot of money for
          it. If that never happens, you probably didn't try hard enough. More importantly, you still got to do what
          you love every day for your entire life. That's about the best you can hope for anyway.
        </p>
        <p>
          So what is it that I'm going to do to be happy? In a word, code. This page, and this first blog post, are
          the product of daring to pursue happiness in lieu of money. Over the next year I will become a full stack
          Ruby on Rails developer. So far I'm making strides with core Ruby and HTML/CSS (I coded this site from
          scratch) and will add in some other languages as I'm more comfortable with these first few. If you like my
          story, and think I could help you by implementing a better website than what you currently have, let me
          know. I'll work for free to gain experience. Please, use me!
        </p>
      </td>
    </tbody>
    </tr>
  </table>
</div>
<p>
  &nbsp
</p>
<p>
  &nbsp
</p>
<!-- Site Navigation -->
<p>
<div id='footer'>
  <%= link_to 'thoughts', root_path %>
  |
  <%= link_to 'interests', static_pages_interests_path %>
  |
  <%= link_to 'photos', static_pages_photos_path %>
  |
  <%= link_to 'code', static_pages_code_path %>
  |
  <%= link_to 'info', static_pages_info_path %>
</div>
</p>
</body>
</html>
